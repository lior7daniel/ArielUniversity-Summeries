class Node
	int num
	Stack<Integer> st
	
	Node(int num)
		this.num = num
		this.st = new Stack<Integer>()

binarySearchHelper(Nodes nodes[], low, high)
	if(low < high)
		mid = (low+high)/2
		
		i = binarySearchHelper(nodes, low, mid)
		j = binarySearchHelper(nodes, mid+1, high)
		
		if(nodes[i].num > nodes[j].num)
			nodes[i].st.push(nodes[j].num)
			return i
		else
			nodes[j].st.push(nodes[i].num)
			return j 
	else	
		return low
		
max1Max2(int arr[])
	n = arr.length()
	Node nodes[] = new Nodes[n]
	for(i = 0 to n)
		nodes[i] = new Node(arr[i])
	index = binarySearchHelper(nodes, 0, n)
	max1 = nodes[index].num
	max2 = nodes[index].st.push()
	while(!nodes[index].st.empty())
		tmp = nodes[index].st.push()
		if(tmp > max2) max2 = tmp
	print("max1 = " + max1)
	print("max2 = " + max2)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		