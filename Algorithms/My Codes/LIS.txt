
public static LISLength(int arr[])
	n = arr.length(), lis = 1
	tmp = new int[n]
	tmp[0] = arr[0]
	for(i = 1 to n)
		index = binarySearchBetween(tmp, arr[i], lis)
		tmp[index] = arr[i]
		if(index+1 > lis) lis++
	return lis
	
	
public static binarySearchBetween(int tmp[], int a, int lis)
	if(a < tmp[0]) return 0
	if(a > tmp[lis-1]) return lis
	
	start = 0
	
	while(start <= lis)
		if(start == lis) return start
		mid = (start + lis)/2
		else 
			if(a == tmp[mid]) return mid
			else if(a < tmp[mid]) lis = mid
			else start = mid+1
	return -1
	
	
	
	
	

	
	
lISSequence(int arr[])
	n = arr.length(), lis = 1
	mat[][] = new mat[n][n]
	mat[0][0] = arr[0]
	for(i = 1 to n)
		index = binarySearchBetween(mat, arr[i], lis)
		for(j = 0 to index)
			mat[index][j] = mat[index-1][j]
		mat[index][index] = arr[i]
		if(index+1 > lis) lis++
	return mat[lis-1]
	


binarySearchBetween(tmp[][], int a, int lis)
	if(a < tmp[0][0]) return 0
	if(a > tmp[lis-1][lis-1]) return lis
	
	start = 0
	
	while(start <= lis)
		if(start == lis) return start
		else
			mid = (start + lis)/2
			if(a == tmp[mid][mid]) return mid
			else if(a < tmp[mid][mid]) lis = mid
			else start = mid+1
	return -1
	
	
	
